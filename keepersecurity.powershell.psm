

New-KeeperRecord {
Param(
    [Parameter(Mandatory=$false)][string]$title,
    [Parameter(Mandatory=$true)][string]$login,
    [Parameter(Mandatory=$false)][string]$password,
    [Parameter(Mandatory=$false)][string]$url,
    [Parameter(Mandatory=$false)][string]$notes,
    [Parameter(Mandatory=$false)][string]$customfields,
    [Parameter(Mandatory=$false)][string]$folderUId
    #[Parameter(Mandatory=$false)][string]$force,
    #[Parameter(Mandatory=$false)][string]$generate
)

$Parameters = @{}
if(![string]::IsNullOrEmpty($title)) { $Parameters.Add("t","$title") }
if(![string]::IsNullOrEmpty($login)) { $Parameters.Add("l","$login") }
if(![string]::IsNullOrEmpty($password)) { $Parameters.Add("p","$password") }
if(![string]::IsNullOrEmpty($url)) { $Parameters.Add("u","$url") }
if(![string]::IsNullOrEmpty($notes)) { $Parameters.Add("n","$notes") }
if(![string]::IsNullOrEmpty($customfields)) { $Parameters.Add("c","$customfields") }
if(![string]::IsNullOrEmpty($folderUId)) { $Parameters.Add("f","$folderUId") }
#if(![string]::IsNullOrEmpty($force)) { $Parameters.Add("force","$force") }
#if(![string]::IsNullOrEmpty($generate)) { $Parameters.Add("generate","$generate") }

    try 
    {
        $result = python "$PSScriptRoot/PyScript/New-KeeperRecord.py" @Parameters
    }
    catch 
    {
        Write-Error "New-KeeperRecord: Unable to create new record"
        $result = "Error: $_"
    }
return $result

}

Get-KeeperRecord {
Param(
    [Parameter(Mandatory=$true)][string]$recordUid,
    [Parameter(Mandatory=$false)][ValidateSet("json","keepas","csv")][string]$format #json, keepass, csv
)

$Parameters = @{}
if(![string]::IsNullOrEmpty($recordUid)) { $Parameters.Add("r","$recordUid") }
if(![string]::IsNullOrEmpty($format)) { $Parameters.Add("f","$format") }

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Get-KeeperRecord.py" @Parameters
    }
    catch 
    {
        Write-Error "Get-KeeperRecord: Unable to create new record"
        $result = "Error: $_"
    }
return $result
}

Del-KeeperRecord {
Param(
    [Parameter(Mandatory=$true)][string]$recordUId,
    [Parameter(Mandatory=$false)][string]$force
)

$Parameters = @{}
if(![string]::IsNullOrEmpty($recordUid)) { $Parameters.Add("r","$recordUid") }
if(![string]::IsNullOrEmpty($force)) { $Parameters.Add("f","$force") }

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Del-KeeperRecord.py" @Parameters
    }
    catch 
    {
        Write-Error "Del-KeeperRecord: Unable to create new record"
        $result = "Error: $_"
    }
return $result
}

List-KeeperRecord {
Param(
    [Parameter(Mandatory=$true)][string]$pattern
)

$Parameters = @{}
if(![string]::IsNullOrEmpty($pattern)) { $Parameters.Add("p","$pattern") }

    try 
    {
        $result = python "$PSScriptRoot/PyScript/List-KeeperRecord.py" @Parameters
    }
    catch 
    {
        Write-Error "List-KeeperRecord: Unable to create new record"
        $result = "Error: $_"
    }
return $result
}

Search-KeeperRecord {
Param(
    [Parameter(Mandatory=$true)][string]$pattern
)

$Parameters = @{}
if(![string]::IsNullOrEmpty($pattern)) { $Parameters.Add("p","$pattern") }

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Search-KeeperRecord.py" @Parameters
    }
    catch 
    {
        Write-Error "Search-KeeperRecord: Unable to create new record"
        $result = "Error: $_"
    }
return $result
}

Add-KeeperRecordNotes {
Param(
    [Parameter(Mandatory=$true)][string]$recordUId,
    [Parameter(Mandatory=$false)][string]$notes
)

$Parameters = @{}
if(![string]::IsNullOrEmpty($recordUId)) { $Parameters.Add("r","$recordUId") }
if(![string]::IsNullOrEmpty($notes)) { $Parameters.Add("n","$notes") }

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Add-KeeperRecordNotes.py" @Parameters
    }
    catch 
    {
        Write-Error "Add-KeeperRecordNotes: Unable to create new record"
        $result = "Error: $_"
    }
return $result
}

Get-KeeperRecordAttachment {
Param(
    [Parameter(Mandatory=$true)][string]$recordUId
)
}
Del-KeeperRecordAttachment {
Param(
    [Parameter(Mandatory=$true)][string]$recordUId,
    [Parameter(Mandatory=$false)][string]$attachmentName
)
}
New-KeeperRecordAttachment {
Param(
    [Parameter(Mandatory=$true)][string]$recordUId,
    [Parameter(Mandatory=$false)][string]$filePath
)
}

Share-KeeperRecord {
Param(
    [Parameter(Mandatory=$true)][string]$recordUId,
    [Parameter(Mandatory=$false)][string]$mail,
    [Parameter(Mandatory=$false)][string]$action,
    [Parameter(Mandatory=$false)][string]$share,
    [Parameter(Mandatory=$false)][string]$write
)

}

# FOLDER
List-KeeperFolder {
Param(
    [Parameter(Mandatory=$false)][string]$list,
    [Parameter(Mandatory=$false)][string]$folders,
    [Parameter(Mandatory=$false)][string]$records,
    [Parameter(Mandatory=$false)][string]$pattern
)
}

Del-KeeperFolder {
Param(
    [Parameter(Mandatory=$true)][string]$folderUId,
    [Parameter(Mandatory=$false)][string]$force
)
}

New-KeeperUserFolder {
Param(
    [Parameter(Mandatory=$true)][string]$name, # user-folder
    [Parameter(Mandatory=$false)][string]$permission,
    [Parameter(Mandatory=$false)][string]$manageUsers,
    [Parameter(Mandatory=$false)][string]$manageRecords,
    [Parameter(Mandatory=$false)][string]$canShare,
    [Parameter(Mandatory=$false)][string]$canEdit,
    [Parameter(Mandatory=$false)][string]$path
)
}

New-KeeperSharedFolder {
Param(
    [Parameter(Mandatory=$true)][string]$name, # shared-folder
    [Parameter(Mandatory=$false)][string]$permission,
    [Parameter(Mandatory=$false)][string]$manageUsers,
    [Parameter(Mandatory=$false)][string]$manageRecords,
    [Parameter(Mandatory=$false)][string]$canShare,
    [Parameter(Mandatory=$false)][string]$canEdit,
    [Parameter(Mandatory=$false)][string]$path
)
}

Move-KeeperFolder {
Param(
    [Parameter(Mandatory=$true)][string]$folderUId,
    [Parameter(Mandatory=$true)][string]$destination,
    [Parameter(Mandatory=$false)][string]$canEdit,
    [Parameter(Mandatory=$false)][string]$canReShare,
    [Parameter(Mandatory=$false)][string]$force
)

}

Link-KeeperRecord {
    [Parameter(Mandatory=$true)][string]$recordUId,
    [Parameter(Mandatory=$true)][string]$linkPath,
    [Parameter(Mandatory=$false)][string]$canEdit,
    [Parameter(Mandatory=$false)][string]$canReShare,
    [Parameter(Mandatory=$false)][string]$force
}
Link-KeeperFolder {
Param(
    [Parameter(Mandatory=$true)][string]$folderUId,
    [Parameter(Mandatory=$true)][string]$linkPath,
    [Parameter(Mandatory=$false)][string]$canEdit,
    [Parameter(Mandatory=$false)][string]$canReShare,
    [Parameter(Mandatory=$false)][string]$force
)
}

Share-KeeperFolder {
Param(
    [Parameter(Mandatory=$true)][string]$folderUId,
    [Parameter(Mandatory=$false)][string]$action,
    [Parameter(Mandatory=$false)][string]$user,
    [Parameter(Mandatory=$false)][string]$record,
    [Parameter(Mandatory=$false)][string]$manageRecords,
    [Parameter(Mandatory=$false)][string]$manageUsers,
    [Parameter(Mandatory=$false)][string]$canShare,
    [Parameter(Mandatory=$false)][string]$canEdit
)
}


# ENTERPRISE INFO
Get-KeeperEnterpriseInfo {
Param (
    [Parameter(Mandatory=$false)][string]$nodes,
    [Parameter(Mandatory=$false)][string]$users,
    [Parameter(Mandatory=$false)][string]$teams,
    [Parameter(Mandatory=$false)][string]$roles,
    [Parameter(Mandatory=$false)][string]$verbose,
    [Parameter(Mandatory=$false)][string]$node
)

}

# USER
New-KeeperUser {
Param(
    [Parameter(Mandatory=$true)][string]$mail,
    [Parameter(Mandatory=$false)][string]$password,
    [Parameter(Mandatory=$false)][string]$name,
    [Parameter(Mandatory=$false)][string]$dataCenter,
    [Parameter(Mandatory=$false)][string]$node,
    [Parameter(Mandatory=$true)][string]$secretQuestion,
    [Parameter(Mandatory=$true)][string]$secretAnswer,
    [Parameter(Mandatory=$false)][string]$storeRecord,
    [Parameter(Mandatory=$false)][string]$generate    
)
}

# ENTERPRISE USER
Set-KeeperEnterpriseUser {
    [Parameter(Mandatory=$false)][string]$userEmail,
    [Parameter(Mandatory=$false)][string]$expireMasterPassword,
    [Parameter(Mandatory=$false)][string]$enabled, #lock/unlock
    [Parameter(Mandatory=$false)][string]$name,
    [Parameter(Mandatory=$false)][string]$node,
    [Parameter(Mandatory=$false)][string]$addRole,
    [Parameter(Mandatory=$false)][string]$removeRole,
    [Parameter(Mandatory=$false)][string]$addTeam,
    [Parameter(Mandatory=$false)][string]$removeTeam,
    [Parameter(Mandatory=$false)][string]$force
}

New-KeeperEnterpriseUser {
Param(
    [Parameter(Mandatory=$true)][string]$email,
    [Parameter(Mandatory=$false)][string]$force
)

}

# ENTERPRISE ROLE
Set-KeeperEnterpriseRole {
Param(
    [Parameter(Mandatory=$false)][string]$addUser,
    [Parameter(Mandatory=$false)][string]$removeUser,
    [Parameter(Mandatory=$false)][string]$role
)

}

# ENTERPRISE TEAM
New-KeeperEnterpriseTeam {
Param(
    [Parameter(Mandatory=$true)][string]$name,
    [Parameter(Mandatory=$false)][string]$verbose,
    [Parameter(Mandatory=$false)][string]$force
)

}
Set-KeeperEnterpriseTeam {
Param(
    [Parameter(Mandatory=$true)][string]$teamId,
    [Parameter(Mandatory=$false)][string]$addUser,
    [Parameter(Mandatory=$false)][string]$removeUser,
    [ValidateSet("On","Off")][string]$restrictEdit, 
    [ValidateSet("On","Off")][string]$restrictShare, 
    [ValidateSet("On","Off")][string]$restrictView,
    [Parameter(Mandatory=$false)][string]$node
)

}
Del-KeeperEnterpriseTeam {
Param(
    [Parameter(Mandatory=$true)][string]$teamId,
    [Parameter(Mandatory=$false)][string]$force
)

}

# AUDIT LOG/REPORT
Get-KeeperAuditLog {
Param(
    [Parameter(Mandatory=$true)][string]$recordId,
    [Parameter(Mandatory=$true)][ValidateSet("splunk","syslog","sumo")][string]$target
)

}

Get-KeeperAuditReport {
Param(
    [ValidateSet('raw', 'dim', 'hour', 'day', 'week', 'month', 'span')][string]$reportType, 
    [ValidateSet("Message","Fields")][string]$reportFormat,
    [Parameter(Mandatory=$false)][string]$columns,
    [ValidateSet("occurrences", "first_created", "last_created")][string]$aggregate, 
    [Parameter(Mandatory=$false)][string]$timezone,
    [Parameter(Mandatory=$false)][string]$limit,
    [ValidateSet("desc","asc")][string]$order,
    [Parameter(Mandatory=$false)][string]$created,
    [Parameter(Mandatory=$false)][string]$eventType,
    [Parameter(Mandatory=$false)][string]$username,
    [Parameter(Mandatory=$false)][string]$toUsername,
    [Parameter(Mandatory=$false)][string]$recordUid,
    [Parameter(Mandatory=$false)][string]$sharedFolderUid
)
}
