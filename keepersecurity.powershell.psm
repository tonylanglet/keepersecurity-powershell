

function New-KeeperRecord {
Param(
    [Parameter(Mandatory=$false)][string]$Title,
    [Parameter(Mandatory=$true)][string]$Login,
    [Parameter(Mandatory=$false)][string]$Password,
    [Parameter(Mandatory=$false)][string]$Url,
    [Parameter(Mandatory=$false)][string]$Notes,
    [Parameter(Mandatory=$false)][string]$Customfields,
    [Parameter(Mandatory=$false)][string]$FolderUId,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($title)) { $Parameters += "--title", $title }
if(![string]::IsNullOrEmpty($login)) { $Parameters += "--login", $login }
if(![string]::IsNullOrEmpty($password)) { $Parameters += "--password", $password }
if(![string]::IsNullOrEmpty($url)) { $Parameters += "--url", $url }
if(![string]::IsNullOrEmpty($notes)) { $Parameters += "--notes", $notes }
if(![string]::IsNullOrEmpty($customfields)) { $Parameters += "--custom", $customfields }
if(![string]::IsNullOrEmpty($folderUId)) { $Parameters += "--folder", $folderUId }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/New-KeeperRecord.py" @Parameters
    }
    catch 
    {
        Write-Error "New-KeeperRecord: Unable to create new record"
        $result = "Error: $_"
    }
return $result

}

function Get-KeeperRecord {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$false)][ValidateSet("json","detail")][string]$Format,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--record", $Identity }
if(![string]::IsNullOrEmpty($format)) { $Parameters += "-format", $format }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Get-KeeperRecord.py" @Parameters
    }
    catch 
    {
        Write-Error "Get-KeeperRecord: Unable to create new record"
        $result = "Error: $_"
    }
return $result
}

function Del-KeeperRecord {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--record",$Identity }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Del-KeeperRecord.py" @Parameters
    }
    catch 
    {
        Write-Error "Del-KeeperRecord: Unable to create new record"
        $result = "Error: $_"
    }
return $result
}

function List-KeeperRecord {
Param(
    [Parameter(Mandatory=$true)][string]$Pattern,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($pattern)) { $Parameters += "--pattern",$pattern }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/List-KeeperRecord.py" @Parameters
    }
    catch 
    {
        Write-Error "List-KeeperRecord: Unable to create new record"
        $result = "Error: $_"
    }
return $result
}

function Search-KeeperRecord {
Param(
    [Parameter(Mandatory=$true)][string]$Pattern,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($pattern)) { $Parameters += "--pattern",$pattern }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Search-KeeperRecord.py" @Parameters
    }
    catch 
    {
        Write-Error "Search-KeeperRecord: Unable to create new record"
        $result = "Error: $_"
    }
return $result
}

function Add-KeeperRecordNotes {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$false)][string]$notes,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--record", $Identity }
if(![string]::IsNullOrEmpty($notes)) { $Parameters += "--notes", $notes }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Add-KeeperRecordNotes.py" @Parameters
    }
    catch 
    {
        Write-Error "Add-KeeperRecordNotes: Unable to create new record"
        $result = "Error: $_"
    }
return $result
}

function Get-KeeperRecordAttachment {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--record",$Identity }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Get-KeeperRecordAttachment.py" @Parameters
    }
    catch 
    {
        Write-Error "Get-KeeperRecordAttachment: Unable to get attachment"
        $result = "Error: $_"
    }
return $result
}

function Del-KeeperRecordAttachment {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$false)][string]$attachmentName,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--record", $Identity }
if(![string]::IsNullOrEmpty($attachmentName)) { $Parameters += "--name", $attachmentName }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Del-KeeperRecordAttachment.py" @Parameters
    }
    catch 
    {
        Write-Error "Add-KeeperRecordAttachment: Unable to delete attachment"
        $result = "Error: $_"
    }
return $result
}

function New-KeeperRecordAttachment {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$false)][string[]]$filePath,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--record", $Identity }
if(![string]::IsNullOrEmpty($filePath)) { $Parameters += "--file", $filePath } # Requires to be a list?
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/New-KeeperRecordAttachment.py" @Parameters
    }
    catch 
    {
        Write-Error "New-KeeperRecordAttachment: Unable to add attachment"
        $result = "Error: $_"
    }
return $result
}

function Set-KeeperSharedRecordPermissions {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$false)][string]$Mail,
    [Parameter(Mandatory=$false)][string]$Action,
    [Parameter(Mandatory=$false)][string]$Share,
    [Parameter(Mandatory=$false)][string]$Write,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--record", $Identity }
if(![string]::IsNullOrEmpty($mail)) { $Parameters += "--email", $mail }
if(![string]::IsNullOrEmpty($action)) { $Parameters += "--action", $action }
if(![string]::IsNullOrEmpty($share)) { $Parameters += "--share", $share }
if(![string]::IsNullOrEmpty($write)) { $Parameters += "--write", $write }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Share-KeeperRecord.py" @Parameters
    }
    catch 
    {
        Write-Error "Share-KeeperRecord: Unable to add attachment"
        $result = "Error: $_"
    }
return $result
}

# FOLDER
function List-KeeperFolder {
Param(
    [Parameter(Mandatory=$false)][string]$List,
    [Parameter(Mandatory=$false)][string]$Folders,
    [Parameter(Mandatory=$false)][string]$Records,
    [Parameter(Mandatory=$false)][string]$Pattern,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($list)) { $Parameters += "--list",$list }
if(![string]::IsNullOrEmpty($folders)) { $Parameters += "--folders", $folders }
if(![string]::IsNullOrEmpty($records)) { $Parameters += "--records", $records }
if(![string]::IsNullOrEmpty($pattern)) { $Parameters += "--pattern", $pattern }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/List-KeeperFolder.py" @Parameters
    }
    catch 
    {
        Write-Error "List-KeeperFolder: Unable to add attachment"
        $result = "Error: $_"
    }
return $result
}

function Del-KeeperFolder {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @{}
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--folder", $Identity }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Del-KeeperFolder.py" @Parameters
    }
    catch 
    {
        Write-Error "Del-KeeperFolder: Unable to remove folder"
        $result = "Error: $_"
    }
return $result
}

function New-KeeperUserFolder {
Param(
    [Parameter(Mandatory=$true)][string]$Name, 
    [Parameter(Mandatory=$false)][string]$Permission,
    [Parameter(Mandatory=$false)][string]$ManageUsers,
    [Parameter(Mandatory=$false)][string]$ManageRecords,
    [Parameter(Mandatory=$false)][string]$CanShare,
    [Parameter(Mandatory=$false)][string]$CanEdit,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($permission)) { $Parameters += "-all", $permission }
if(![string]::IsNullOrEmpty($manageUsers)) { $Parameters += "--manage-users", $manageUsers }
if(![string]::IsNullOrEmpty($manageRecords)) { $Parameters += "--manage-records", $manageRecords }
if(![string]::IsNullOrEmpty($canShare)) { $Parameters += "--can-share", $canShare }
if(![string]::IsNullOrEmpty($canEdit)) { $Parameters += "--can-edit", $canEdit }
if(![string]::IsNullOrEmpty($name)) { $Parameters += "--name", $name }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/New-KeeperUserFolder.py" @Parameters
    }
    catch 
    {
        Write-Error "New-KeeperUserFolder: Unable to create a new user folder"
        $result = "Error: $_"
    }
return $result
}

function New-KeeperSharedFolder {
Param(
    [Parameter(Mandatory=$true)][string]$Name,
    [Parameter(Mandatory=$false)][string]$Permission,
    [Parameter(Mandatory=$false)][string]$ManageUsers,
    [Parameter(Mandatory=$false)][string]$ManageRecords,
    [Parameter(Mandatory=$false)][string]$CanShare,
    [Parameter(Mandatory=$false)][string]$CanEdit,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Name)) { $Parameters += "--name", $Name }
if(![string]::IsNullOrEmpty($permission)) { $Parameters += "--all", $permission }
if(![string]::IsNullOrEmpty($manageUsers)) { $Parameters += "--manage-users", $manageUsers }
if(![string]::IsNullOrEmpty($manageRecords)) { $Parameters += "--manager-records", $manageRecords }
if(![string]::IsNullOrEmpty($canShare)) { $Parameters += "--can-share", $canShare }
if(![string]::IsNullOrEmpty($canEdit)) { $Parameters += "--can-edit", $canEdit }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/New-KeeperSharedFolder.py" @Parameters
    }
    catch 
    {
        Write-Error "New-KeeperSharedFolder: Unable to create a new shared folder"
        $result = "Error: $_"
    }
return $result
}

function Move-KeeperFolder {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$true)][string]$destination,
    [Parameter(Mandatory=$false)][string]$canEdit,
    [Parameter(Mandatory=$false)][string]$canReShare,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--source",$Identity }
if(![string]::IsNullOrEmpty($destination)) { $Parameters += "--destination",$destination }
if(![string]::IsNullOrEmpty($canEdit)) { $Parameters += "--can-edit",$canEdit }
if(![string]::IsNullOrEmpty($canReShare)) { $Parameters += "--can-reshare",$canReShare }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Move-KeeperFolder.py" @Parameters
    }
    catch 
    {
        Write-Error "Move-KeeperFolder: Unable to move folder"
        $result = "Error: $_"
    }
return $result
}

function Link-KeeperRecord {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$true)][string]$linkPath,
    [Parameter(Mandatory=$false)][string]$canEdit,
    [Parameter(Mandatory=$false)][string]$canReShare,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--source",$Identity }
if(![string]::IsNullOrEmpty($linkPath)) { $Parameters += "--destination",$linkPath }
if(![string]::IsNullOrEmpty($canEdit)) { $Parameters += "--can-edit",$canEdit }
if(![string]::IsNullOrEmpty($canReShare)) { $Parameters += "--can-reshare",$canReShare }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Link-KeeperRecord.py" @Parameters
    }
    catch 
    {
        Write-Error "Link-KeeperRecord: Unable to link record"
        $result = "Error: $_"
    }
return $result
}

function Link-KeeperFolder {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$true)][string]$linkPath,
    [Parameter(Mandatory=$false)][string]$canEdit,
    [Parameter(Mandatory=$false)][string]$canReShare,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--source",$Identity }
if(![string]::IsNullOrEmpty($linkPath)) { $Parameters += "--destination",$linkPath }
if(![string]::IsNullOrEmpty($canEdit)) { $Parameters += "--can-edit",$canEdit }
if(![string]::IsNullOrEmpty($canReShare)) { $Parameters += "--can-reshare",$canReShare }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Link-KeeperFolder.py" @Parameters
    }
    catch 
    {
        Write-Error "Link-KeeperFolder: Unable to link folder"
        $result = "Error: $_"
    }
return $result
}

function Set-KeeperSharedFolderPermissions {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$false)][string]$action,
    [Parameter(Mandatory=$false)][string]$user,
    [Parameter(Mandatory=$false)][string]$record,
    [Parameter(Mandatory=$false)][string]$manageRecords,
    [Parameter(Mandatory=$false)][string]$manageUsers,
    [Parameter(Mandatory=$false)][string]$canShare,
    [Parameter(Mandatory=$false)][string]$canEdit,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--folder",$Identity }
if(![string]::IsNullOrEmpty($action)) { $Parameters += "--action",$action }
if(![string]::IsNullOrEmpty($user)) { $Parameters += "--user",$user }
if(![string]::IsNullOrEmpty($record)) { $Parameters += "--record",$record }
if(![string]::IsNullOrEmpty($manageRecords)) { $Parameters += "--manage-records",$manageRecords }
if(![string]::IsNullOrEmpty($manageUsers)) { $Parameters += "--manage-users",$manageUsers }
if(![string]::IsNullOrEmpty($canShare)) { $Parameters += "--can-share",$canShare }
if(![string]::IsNullOrEmpty($canEdit)) { $Parameters += "--can-edit",$canEdit }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Set-KeeperSharedFolderPermission.py" @Parameters
    }
    catch 
    {
        Write-Error "Share-KeeperFolder: Unable to link folder"
        $result = "Error: $_"
    }
return $result
}

# USER
function New-KeeperUser {
Param(
    [Parameter(Mandatory=$true)][string]$Mail,
    [Parameter(Mandatory=$false)][string]$Password,
    [Parameter(Mandatory=$false)][string]$Name,
    [Parameter(Mandatory=$false)][string]$DataCenter,
    [Parameter(Mandatory=$false)][string]$Node,
    [Parameter(Mandatory=$true)][string]$SecretQuestion,
    [Parameter(Mandatory=$true)][string]$SecretAnswer,
    [Parameter(Mandatory=$false)][string]$StoreRecord,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject  
)

$Parameters = @()
if(![string]::IsNullOrEmpty($mail)) { $Parameters += "--email",$mail }
if(![string]::IsNullOrEmpty($password)) { $Parameters += "--password",$password }
if(![string]::IsNullOrEmpty($name)) { $Parameters += "--name",$name }
if(![string]::IsNullOrEmpty($dataCenter)) { $Parameters += "--data-center",$dataCenter }
if(![string]::IsNullOrEmpty($node)) { $Parameters += "--node", $node }
if(![string]::IsNullOrEmpty($secretQuestion)) { $Parameters += "--question",$secretQuestion }
if(![string]::IsNullOrEmpty($secretAnswer)) { $Parameters += "--answer",$secretAnswer }
if(![string]::IsNullOrEmpty($storeRecord)) { $Parameters += "--store-record",$storeRecord }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/New-KeeperUser.py" @Parameters
    }
    catch 
    {
        Write-Error "New-KeeperUser: Unable to create new keeper user"
        $result = "Error: $_"
    }
return $result
}

# ENTERPRISE INFO
function Get-KeeperEnterpriseInfo {
Param (
    [Parameter(Mandatory=$false)][string]$nodes,
    [Parameter(Mandatory=$false)][string]$users,
    [Parameter(Mandatory=$false)][string]$teams,
    [Parameter(Mandatory=$false)][string]$roles,
    [Parameter(Mandatory=$false)][string]$node,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($nodes)) { $Parameters += "--nodes",$nodes }
if(![string]::IsNullOrEmpty($users)) { $Parameters += "--users",$users }
if(![string]::IsNullOrEmpty($teams)) { $Parameters += "--teams",$teams }
if(![string]::IsNullOrEmpty($roles)) { $Parameters += "--roles",$roles }
if(![string]::IsNullOrEmpty($node)) { $Parameters += "--node",$node }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Get-KeeperEnterpriseInfo.py" @Parameters
    }
    catch 
    {
        Write-Error "Get-KeeperEnterpriseInfo: Unable to link folder"
        $result = "Error: $_"
    }
return $result
}

# ENTERPRISE USER
function Set-KeeperEnterpriseUser {
Param(
    [Parameter(Mandatory=$false)][string]$Identity, #mail
    [Parameter(Mandatory=$false)][string]$expireMasterPassword,
    [Parameter(Mandatory=$false)][string]$lock,
    [Parameter(Mandatory=$false)][string]$unlock,
    [Parameter(Mandatory=$false)][string]$name,
    [Parameter(Mandatory=$false)][string]$node,
    [Parameter(Mandatory=$false)][string]$addRole,
    [Parameter(Mandatory=$false)][string]$removeRole,
    [Parameter(Mandatory=$false)][string]$addTeam,
    [Parameter(Mandatory=$false)][string]$removeTeam,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--email",$Identity }
if(![string]::IsNullOrEmpty($expireMasterPassword)) { $Parameters += "--expire",$expireMasterPassword }
if(![string]::IsNullOrEmpty($name)) { $Parameters += "--name",$name }
if(![string]::IsNullOrEmpty($node)) { $Parameters += "--node",$node }
if(![string]::IsNullOrEmpty($addRole)) { $Parameters += "--add-role",$addRole }
if(![string]::IsNullOrEmpty($removeRole)) { $Parameters += "--remove-role",$removeRole }
if(![string]::IsNullOrEmpty($addTeam)) { $Parameters += "--add-team",$addTeam }
if(![string]::IsNullOrEmpty($removeTeam)) { $Parameters += "--remove-team",$removeTeam }
if(![string]::IsNullOrEmpty($unlock)) { $Parameters += "--unlock",$unlock }
if(![string]::IsNullOrEmpty($lock)) { $Parameters += "--lock",$lock }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Set-KeeperEnterpriseUser.py" @Parameters
    }
    catch 
    {
        Write-Error "Set-KeeperEnterpriseUser: Unable to set enterprise user"
        $result = "Error: $_"
    }
return $result
}

function New-KeeperEnterpriseUser {
Param(
    [Parameter(Mandatory=$true)][string]$Mail,
    [Parameter(Mandatory=$false)][string]$Name,
    [Parameter(Mandatory=$false)][string]$AddRole,
    [Parameter(Mandatory=$false)][string]$AddTeam,
    [Parameter(Mandatory=$false)][string]$Node,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Mail)) { $Parameters += "--email",$Mail }
if(![string]::IsNullOrEmpty($Mail)) { $Parameters += "--name",$Name }
if(![string]::IsNullOrEmpty($Mail)) { $Parameters += "--add-role",$AddRole }
if(![string]::IsNullOrEmpty($Mail)) { $Parameters += "--add-team",$AddTeam }
if(![string]::IsNullOrEmpty($Mail)) { $Parameters += "--node",$Node }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/New-KeeperEnterpriseUser.py" @Parameters
    }
    catch 
    {
        Write-Error "New-KeeperEnterpriseUser: Unable to create new enterprise user"
        $result = "Error: $_"
    }
return $result
}

function Del-KeeperEnterpriseUser {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Mail)) { $Parameters += "--email", $Identity }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Del-KeeperEnterpriseUser.py" @Parameters
    }
    catch 
    {
        Write-Error "Del-KeeperEnterpriseUser: Unable to remove enterprise user"
        $result = "Error: $_"
    }
return $result
}

function Set-KeeperEnterpriseUser {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$false)][string]$Lock,
    [Parameter(Mandatory=$false)][string]$Unlock,
    [Parameter(Mandatory=$false)][string]$Name,
    [Parameter(Mandatory=$false)][string]$Node,
    [Parameter(Mandatory=$false)][string]$AddRole,
    [Parameter(Mandatory=$false)][string]$RemoveRole,
    [Parameter(Mandatory=$false)][string]$AddTeam,
    [Parameter(Mandatory=$false)][string]$RemoveTeam,
    [Parameter(Mandatory=$false)][string]$Expire,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--email",$Identity }
if(![string]::IsNullOrEmpty($Lock)) { $Parameters += "--lock",$Lock }
if(![string]::IsNullOrEmpty($Unlock)) { $Parameters += "--unlock",$Unlock }
if(![string]::IsNullOrEmpty($Name)) { $Parameters += "--name",$Name }
if(![string]::IsNullOrEmpty($AddRole)) { $Parameters += "--add-role",$AddRole }
if(![string]::IsNullOrEmpty($RemoveRole)) { $Parameters += "--remove-role",$RemoveRole }
if(![string]::IsNullOrEmpty($AddTeam)) { $Parameters += "--add-team",$AddTeam }
if(![string]::IsNullOrEmpty($RemoveTeam)) { $Parameters += "--remove-team",$RemoveTeam }
if(![string]::IsNullOrEmpty($Expire)) { $Parameters += "--expire",$Expire }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Set-KeeperEnterpriseUser.py" @Parameters
    }
    catch 
    {
        Write-Error "Set-KeeperEnterpriseUser: Unable to edit enterprise user"
        $result = "Error: $_"
    }
return $result
}

# ENTERPRISE ROLE
function Set-KeeperEnterpriseRole {
Param(
    [Parameter(Mandatory=$false)][string]$AddUser,
    [Parameter(Mandatory=$false)][string]$RemoveUser,
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($addUser)) { $Parameters += "--add-user",$addUser }
if(![string]::IsNullOrEmpty($removeUser)) { $Parameters += "--remove-user",$removeUser }
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--role",$Identity }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Set-KeeperEnterpriseRole.py" @Parameters
    }
    catch 
    {
        Write-Error "Set-KeeperEnterpriseRole: Unable to set enterprise role"
        $result = "Error: $_"
    }
return $result
}

# ENTERPRISE TEAM
function New-KeeperEnterpriseTeam {
Param(
    [Parameter(Mandatory=$true)][string]$Name,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($name)) { $Parameters += "--name", $Name }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/New-KeeperEnterpriseTeam.py" @Parameters
    }
    catch 
    {
        Write-Error "New-KeeperEnterpriseTeam: Unable create new enterprise team"
        $result = "Error: $_"
    }
return $result
}

function Set-KeeperEnterpriseTeam {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$false)][string]$AddUser,
    [Parameter(Mandatory=$false)][string]$RemoveUser,
    [Parameter(Mandatory=$false)][ValidateSet("On","Off")][string]$RestrictEdit, 
    [Parameter(Mandatory=$false)][ValidateSet("On","Off")][string]$RestrictShare, 
    [Parameter(Mandatory=$false)][ValidateSet("On","Off")][string]$RestrictView,
    [Parameter(Mandatory=$false)][string]$Node,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--team",$Identity }
if(![string]::IsNullOrEmpty($addUser)) { $Parameters += "--add-user",$addUser }
if(![string]::IsNullOrEmpty($removeUser)) { $Parameters += "--remove-user",$removeUser }
if(![string]::IsNullOrEmpty($restrictEdit)) { $Parameters += "--restrict-edit",$restrictEdit }
if(![string]::IsNullOrEmpty($restrictShare)) { $Parameters += "--restrict-share",$restrictShare }
if(![string]::IsNullOrEmpty($restrictView)) { $Parameters += "--restrict-view",$restrictView }
if(![string]::IsNullOrEmpty($node)) { $Parameters += "--node",$node }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Set-KeeperEnterpriseTeam.py" @Parameters
    }
    catch 
    {
        Write-Error "Set-KeeperEnterpriseTeam: Unable to set enterprise team"
        $result = "Error: $_"
    }
return $result
}

function Del-KeeperEnterpriseTeam {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--team", $Identity }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Del-KeeperEnterpriseTeam.py" @Parameters
    }
    catch 
    {
        Write-Error "Del-KeeperEnterpriseTeam: Unable to delete enterprise team"
        $result = "Error: $_"
    }
return $result
}

# AUDIT LOG/REPORT
function Get-KeeperAuditLog {
Param(
    [Parameter(Mandatory=$true)][string]$Identity,
    [Parameter(Mandatory=$true)][ValidateSet("splunk","syslog","sumo")][string]$target,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($Identity)) { $Parameters += "--record", $Identity }
if(![string]::IsNullOrEmpty($target)) { $Parameters += "--target", $target }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Get-KeeperAuditLog.py" @Parameters
    }
    catch 
    {
        Write-Error "Get-KeeperAuditLog: Unable to get audit log"
        $result = "Error: $_"
    }
return $result
}

function Get-KeeperAuditReport {
Param(
    [Parameter(Mandatory=$false)][ValidateSet('raw', 'dim', 'hour', 'day', 'week', 'month', 'span')][string]$ReportType, 
    [Parameter(Mandatory=$false)][ValidateSet("Message","Fields")][string]$ReportFormat,
    [Parameter(Mandatory=$false)][string]$Columns,
    [Parameter(Mandatory=$false)][ValidateSet("occurrences", "first_created", "last_created")][string]$Aggregate, 
    [Parameter(Mandatory=$false)][string]$Timezone,
    [Parameter(Mandatory=$false)][string]$Limit,
    [Parameter(Mandatory=$false)][ValidateSet("desc","asc")][string]$Order,
    [Parameter(Mandatory=$false)][string]$Created,
    [Parameter(Mandatory=$false)][string]$EventType,
    [Parameter(Mandatory=$false)][string]$Username,
    [Parameter(Mandatory=$false)][string]$ToUsername,
    [Parameter(Mandatory=$false)][string]$RecordUid,
    [Parameter(Mandatory=$false)][string]$SharedFolderUid,
    [Parameter(Mandatory=$true)][PSCredential]$AuthObject
)

$Parameters = @()
if(![string]::IsNullOrEmpty($ReportType)) { $Parameters += "--report-type", $ReportType }
if(![string]::IsNullOrEmpty($ReportFormat)) { $Parameters += "--report-format", $ReportFormat }
if(![string]::IsNullOrEmpty($Columns)) { $Parameters += "--columns", $Columns }
if(![string]::IsNullOrEmpty($Aggregate)) { $Parameters += "--aggregate", $Aggregate }
if(![string]::IsNullOrEmpty($Timezone)) { $Parameters += "--timezone", $Timezone }
if(![string]::IsNullOrEmpty($Limit)) { $Parameters += "--limit", $Limit }
if(![string]::IsNullOrEmpty($Order)) { $Parameters += "--order", $Order }
if(![string]::IsNullOrEmpty($Created)) { $Parameters += "--created", $Created }
if(![string]::IsNullOrEmpty($EventType)) { $Parameters += "--event-type", $EventType }
if(![string]::IsNullOrEmpty($Username)) { $Parameters += "--username", $Username }
if(![string]::IsNullOrEmpty($ToUsername)) { $Parameters += "--to-username", $ToUsername }
if(![string]::IsNullOrEmpty($RecordUid)) { $Parameters += "--record-uid", $RecordUid }
if(![string]::IsNullOrEmpty($SharedFolderUid)) { $Parameters += "--shared-folder-uid", $SharedFolderUid }
$Parameters += "--ausername", $AuthObject.UserName, "--apassword", $AuthObject.Password

    try 
    {
        $result = python "$PSScriptRoot/PyScript/Get-KeeperAuditReport.py" @Parameters
    }
    catch 
    {
        Write-Error "Get-KeeperAuditReport: Unable to get audit report"
        $result = "Error: $_"
    }
return $result
}
